{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pg_net Documentation : https://supabase.github.io/pg_net Source Code : https://github.com/supabase/pg_net pg_net is a PostgreSQL extension exposing a SQL interface for async networking with a focus on scalability and UX. Features: async http GET requests async http POST requests with a JSON payload","title":"Welcome"},{"location":"#pg_net","text":"Documentation : https://supabase.github.io/pg_net Source Code : https://github.com/supabase/pg_net pg_net is a PostgreSQL extension exposing a SQL interface for async networking with a focus on scalability and UX. Features: async http GET requests async http POST requests with a JSON payload","title":"pg_net"},{"location":"api/","text":"HTTP net.http_get description Create an HTTP GET request returning the request's id Note HTTP requests are not started until the transaction is committed signature 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 net . http_get ( -- url for the request url text , -- key/value pairs to be url encoded and appended to the `url` params jsonb default '{}' :: jsonb , -- key/values to be included in request headers headers jsonb default '{}' :: jsonb , -- WARNING: this is currently ignored, so there is no timeout -- the maximum number of milliseconds the request may take before being cancelled timeout_milliseconds int default 1000 ) -- request_id reference returns bigint strict volatile parallel safe language plpgsql usage 1 2 3 4 5 select net . http_get ( 'https://news.ycombinator.com' ) as request_id ; request_id ---------- 1 ( 1 row ) net.http_post description Create an HTTP POST request with a JSON body, returning the request's id Note HTTP requests are not started until the transaction is committed Note the body's character set encoding matches the database's server_encoding setting signature 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 net . http_post ( -- url for the request url text , -- body of the POST request body jsonb default '{}' :: jsonb , -- key/value pairs to be url encoded and appended to the `url` params jsonb default '{}' :: jsonb , -- key/values to be included in request headers headers jsonb default '{\"Content-Type\": \"application/json\"}' :: jsonb , -- WARNING: this is currently ignored, so there is no timeout -- the maximum number of milliseconds the request may take before being cancelled timeout_milliseconds int default 1000 ) -- request_id reference returns bigint volatile parallel safe language plpgsql usage 1 2 3 4 5 6 7 8 9 select net . http_post ( url : = 'https://httpbin.org/post' , body : = '{\"hello\": \"world\"}' :: jsonb ) as request_id ; request_id ---------- 1 ( 1 row ) net.http_collect_response description Given a request_id reference, retrieve the response. When async:=false is set it is recommended that statement_timeout is set for the maximum amount of time the caller is willing to wait in case the response is slow to populate. Warning net.http_collect_response must be in a separate transaction from the calls to net.http_<method> signature 1 2 3 4 5 6 7 8 9 10 11 12 net . http_collect_response ( -- request_id reference request_id bigint , -- when `true`, return immediately. when `false` wait for the request to complete before returning async bool default true ) -- http response composite wrapped in a result type returns net . http_response_result strict volatile parallel safe usage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 select net . http_post ( url : = 'https://httpbin.org/post' , body : = '{\"hello\": \"world\"}' :: jsonb ) as request_id ; request_id ---------- 1 ( 1 row ) select * from net . http_collect_response ( 1 , async : = false ); status | message | response --------+---------+---------- SUCCESS ok ( status_code : = 200 , headers : = '{\"date\": ...}' , body : = '{\"args\": ...}' ):: net . http_response_result select ( response ). body :: json from net . http_collect_response ( request_id : = 1 ); body ------------------------------------------------------------------- { \"args\" : {} , \"data\" : \"{\\\" hello \\ \": \\\" world \\ \"}\" , \"files\" : {} , \"form\" : {} , \"headers\" : { \"Accept\" : \"*/*\" , \"Content-Length\" : \"18\" , \"Content-Type\" : \"application/json\" , \"Host\" : \"httpbin.org\" , \"User-Agent\" : \"pg_net/0.1\" , \"X-Amzn-Trace-Id\" : \"Root=1-61031a5c-7e1afeae69bffa8614d8e48e\" } , \"json\" : { \"hello\" : \"world\" } , \"origin\" : \"135.63.38.488\" , \"url\" : \"https://httpbin.org/post\" } ( 1 row ) where response is a composite 1 2 3 status_code integer headers jsonb body text Possible values for net.http_response_result.status are ('PENDING', 'SUCCESS', 'ERROR')","title":"API Reference"},{"location":"api/#http","text":"","title":"HTTP"},{"location":"api/#nethttp_get","text":"","title":"net.http_get"},{"location":"api/#description","text":"Create an HTTP GET request returning the request's id Note HTTP requests are not started until the transaction is committed","title":"description"},{"location":"api/#signature","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 net . http_get ( -- url for the request url text , -- key/value pairs to be url encoded and appended to the `url` params jsonb default '{}' :: jsonb , -- key/values to be included in request headers headers jsonb default '{}' :: jsonb , -- WARNING: this is currently ignored, so there is no timeout -- the maximum number of milliseconds the request may take before being cancelled timeout_milliseconds int default 1000 ) -- request_id reference returns bigint strict volatile parallel safe language plpgsql","title":"signature"},{"location":"api/#usage","text":"1 2 3 4 5 select net . http_get ( 'https://news.ycombinator.com' ) as request_id ; request_id ---------- 1 ( 1 row )","title":"usage"},{"location":"api/#nethttp_post","text":"","title":"net.http_post"},{"location":"api/#description_1","text":"Create an HTTP POST request with a JSON body, returning the request's id Note HTTP requests are not started until the transaction is committed Note the body's character set encoding matches the database's server_encoding setting","title":"description"},{"location":"api/#signature_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 net . http_post ( -- url for the request url text , -- body of the POST request body jsonb default '{}' :: jsonb , -- key/value pairs to be url encoded and appended to the `url` params jsonb default '{}' :: jsonb , -- key/values to be included in request headers headers jsonb default '{\"Content-Type\": \"application/json\"}' :: jsonb , -- WARNING: this is currently ignored, so there is no timeout -- the maximum number of milliseconds the request may take before being cancelled timeout_milliseconds int default 1000 ) -- request_id reference returns bigint volatile parallel safe language plpgsql","title":"signature"},{"location":"api/#usage_1","text":"1 2 3 4 5 6 7 8 9 select net . http_post ( url : = 'https://httpbin.org/post' , body : = '{\"hello\": \"world\"}' :: jsonb ) as request_id ; request_id ---------- 1 ( 1 row )","title":"usage"},{"location":"api/#nethttp_collect_response","text":"","title":"net.http_collect_response"},{"location":"api/#description_2","text":"Given a request_id reference, retrieve the response. When async:=false is set it is recommended that statement_timeout is set for the maximum amount of time the caller is willing to wait in case the response is slow to populate. Warning net.http_collect_response must be in a separate transaction from the calls to net.http_<method>","title":"description"},{"location":"api/#signature_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 net . http_collect_response ( -- request_id reference request_id bigint , -- when `true`, return immediately. when `false` wait for the request to complete before returning async bool default true ) -- http response composite wrapped in a result type returns net . http_response_result strict volatile parallel safe","title":"signature"},{"location":"api/#usage_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 select net . http_post ( url : = 'https://httpbin.org/post' , body : = '{\"hello\": \"world\"}' :: jsonb ) as request_id ; request_id ---------- 1 ( 1 row ) select * from net . http_collect_response ( 1 , async : = false ); status | message | response --------+---------+---------- SUCCESS ok ( status_code : = 200 , headers : = '{\"date\": ...}' , body : = '{\"args\": ...}' ):: net . http_response_result select ( response ). body :: json from net . http_collect_response ( request_id : = 1 ); body ------------------------------------------------------------------- { \"args\" : {} , \"data\" : \"{\\\" hello \\ \": \\\" world \\ \"}\" , \"files\" : {} , \"form\" : {} , \"headers\" : { \"Accept\" : \"*/*\" , \"Content-Length\" : \"18\" , \"Content-Type\" : \"application/json\" , \"Host\" : \"httpbin.org\" , \"User-Agent\" : \"pg_net/0.1\" , \"X-Amzn-Trace-Id\" : \"Root=1-61031a5c-7e1afeae69bffa8614d8e48e\" } , \"json\" : { \"hello\" : \"world\" } , \"origin\" : \"135.63.38.488\" , \"url\" : \"https://httpbin.org/post\" } ( 1 row ) where response is a composite 1 2 3 status_code integer headers jsonb body text Possible values for net.http_response_result.status are ('PENDING', 'SUCCESS', 'ERROR')","title":"usage"},{"location":"contributing/","text":"pg_net is OSS. PR and issues are welcome. Development Nix is required to set up the environment. Testing For testing locally, execute: 1 2 3 4 5 6 7 8 # might take a while in downloading all the dependencies $ nix-shell # test on pg 12 $ net-with-pg-12 python -m pytest -vv \" # test on pg 13 $ net-with-pg-13 python -m pytest -vv\" Documentation All public API must be documented. Building documentation requires python 3.6+ Install Dependencies Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt Serving To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/pg_net/","title":"Contributing"},{"location":"contributing/#development","text":"Nix is required to set up the environment.","title":"Development"},{"location":"contributing/#testing","text":"For testing locally, execute: 1 2 3 4 5 6 7 8 # might take a while in downloading all the dependencies $ nix-shell # test on pg 12 $ net-with-pg-12 python -m pytest -vv \" # test on pg 13 $ net-with-pg-13 python -m pytest -vv\"","title":"Testing"},{"location":"contributing/#documentation","text":"All public API must be documented. Building documentation requires python 3.6+","title":"Documentation"},{"location":"contributing/#install-dependencies","text":"Install mkdocs, themes, and extensions. 1 pip install -r docs/requirements_docs.txt","title":"Install Dependencies"},{"location":"contributing/#serving","text":"To serve the documentation locally run 1 mkdocs serve and visit the docs at http://127.0.0.1:8000/pg_net/","title":"Serving"},{"location":"installation/","text":"Tested with PostgreSQL 12 and 13. Setup Server Clone this repo and run 1 make && make install To make the extension available to the database add on postgresql.conf : 1 shared_preload_libraries = 'pg_net' Database To enable the extension in PostgreSQL we must execute a create extension statement. The extension creates its own schema/namespace named net to avoid naming conflicts. 1 create extension pg_net ;","title":"Installation"},{"location":"installation/#setup","text":"","title":"Setup"},{"location":"installation/#server","text":"Clone this repo and run 1 make && make install To make the extension available to the database add on postgresql.conf : 1 shared_preload_libraries = 'pg_net'","title":"Server"},{"location":"installation/#database","text":"To enable the extension in PostgreSQL we must execute a create extension statement. The extension creates its own schema/namespace named net to avoid naming conflicts. 1 create extension pg_net ;","title":"Database"}]}